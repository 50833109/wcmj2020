<h1>w1-w2</h1>
<p>建立一個bloger <a href="https://www.blogger.com/blogger.g?blogID=2375246514797626273#allposts/src=sidebar">https://www.blogger.com/blogger.g?blogID=2375246514797626273#allposts/src=sidebar</a><br/><br/>建立一個github <a href="https://github.com/">https://github.com/</a>50833109<br/> <br/>1 super computer 超級電腦<br/>2 mainframe 伺服器主機<br/>3 server 伺服器 虛擬 實體<br/>4 pc 個人電腦<br/>5 microcontroller 微控制器<br/>6 mobile phone 手機<br/><br/>Port 戶號<br/>Nat <br/>DHCP動態網路位置</p>
<p><img alt="SpongeBob SquarePants (character) - Wikipedia" src="https://upload.wikimedia.org/wikipedia/en/thumb/3/3b/SpongeBob_SquarePants_character.svg/1200px-SpongeBob_SquarePants_character.svg.png"/></p>
<h1>w6-7</h1>
<h2>利用手機鏡頭當作 webcam</h2>
<p>Android:<span> </span><a href="https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows">https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows<br/></a> <br/>iPhone:<span> </span><a href="https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/">https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/</a> </p>
<h2>讓手機可以利用電腦熱點上網</h2>
<p>採用 <a href="https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/">https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/</a></p>
<p>將此一 USB Wifi adapter 連接電腦後, 若網路為 IPv4 協定時, 可以透過"設定 -&gt; 網路和網際網路 -&gt; 行動熱點", 選擇開啟並編輯"網路名稱與網路密碼"後, 讓至多 8 台手機透過熱點連線上網.</p>
<p>但是因為目前 Windows 10 並<a href="https://answers.microsoft.com/en-us/windows/forum/all/support-ipv6-in-mobile-hotspot-network-sharing/8801ea57-c6dc-4c10-afe6-192879a85835">未提供 IPv6 網路協定下的網路熱點功能</a>, 因此在純 IPv6 網路協定下無法使用"行動熱點"服務.<br/><br/></p>
<h2>需要 clone 個人倉儲時</h2>
<p>git clone --recurse-submodules 倉儲_url.git</p>
<p>例如: git clone --recurse-submodules<span> </span><a href="https://github.com/mdecourse/wcmj2020.git">https://github.com/mdecourse/wcmj2020.git</a></p>
<h2>現場直播的 audio 錄音設定</h2>
<p>在電腦輔助設計室進行直播時, 由於現場有擴音設備, 因此採用 OBS 串流至 Youtube 的最佳收音並非從 Webcam 的麥克風, 而是從擴音器以 audio outpu 連接到電腦的麥克風插槽, 然後將 OBS 的 audio 設定為從電腦的麥克風收音.</p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/5qTYqHULS7A" width="560"></iframe></p>
<p><br/><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/xYZLwLaUG6U" width="560"></iframe>下載可攜程式系統</p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/IOauashmKho" width="560"></iframe></p>
<h3>利用 git 指令建立 cmsimde 網站</h3>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" data-mce-fragment="1" frameborder="0" height="315" src="https://www.youtube.com/embed/NJTQulLMXnU" width="560"></iframe></p>
<h1>w8-9</h1>
<p><br/><br/><br/><br/>w8<br/><span></span> <br/><span>meeting     </span><a href="https://meet.google.com/zen-ewrh-zfy">https://meet.google.com/zen-ewrh-zfy</a><span> 第四組<span> </span></span><br/><span>2001:288:6004:17::53</span><br/><span>2001:288:6004:17::42<br/></span><span>2001:288:6004:17::17<br/>2001:288:6004:17::4 "虛擬主機 不耐操 可以校外連接"</span> <br/>可能線上上課<br/>組員:<span> </span><span class="number">50833102 組長<br/></span><span> </span><span class="number">50833103</span><span> <br/></span><span class="number">50833105</span><span> <br/></span><span class="number">50833109</span><span> <br/></span><span class="number">50833121</span><span> <br/></span><span class="number">50833124</span><span> <br/></span><span class="number">50833135</span><span> <br/></span><span class="number">50833136</span><span> <br/></span><span class="number">50833137<br/></span><span> </span><span class="number">50833139 <span>group </span><span class="number">4</span></span> <span></span></p>
<p><span class="number"><span class="number"></span></span></p>
<p><img alt="Anton Ego | Wiki | Pixar Amino BR Amino" src="https://pm1.narvii.com/6891/ba6733d3dc9fd0605636d40c50ed235f4ccd9144r1-551-632v2_uhq.jpg"/><br/><br/><br/>w9</p>
<p><a href="https://drive.google.com/file/d/1mqtHKdD2EDJjUvfs76T1-Cs0OwXVJtvO/view?usp=sharing">wcmj2020 W9 第一段影片</a></p>
<p><a href="https://drive.google.com/file/d/1mSFCPGNaO_DYAjOA-C2QL1HessDL0R4H/view?usp=sharing">wcmj2020 W9 第二段影片</a></p>
<h2>網路架構與設定簡介</h2>
<p>在正式進入主題之前，先來了解為何網路使用分層結構，而非從頭到腳一手全包的設計。由於網路需考量許多實際應用上的困難，如傳輸不同種類的資訊、不同版本以及作業系統的交流需求，甚至牽扯到更廣大的範圍，如遠距微波傳送、跨洲海底電纜等不同傳輸媒介。如果要設計能夠包山包海、全部通吃的網路架構是件吃力不討好的事，況且也無法預測未來會出現什麼需求，於是需要個具有彈性的網路架構，還要能夠兼顧未來發展</p>
<p></p>
<p><br/><br/><br/>實體層 (Physical Layer)</p>
<ul>
<li>訂定電腦連接的電氣特定協定</li>
<li>功能 :1.讓資料可經由傳輸媒介   2.兩個實際相連的機器間傳送的</li>
<li>例子 :實體層介面有EIA RE-232、RS-449等，而常見區域網路則有乙太網路、記號環、分散式光纖數據介面、CCITT X.25分封網路、整體服務數位網路、同步光學網路等。<br/><br/></li>
</ul>
<h3>資料鏈結層 (Data-Link Layer)</h3>
<ul>
<li>訊框 (frame) 與實體位置 (MAC)</li>
<li>分為兩個子層：</li>
<li>(一)邏輯連結控制(Logical Link Control, 簡稱LLC)：訊框遞送、錯誤通知、資料流控制</li>
<li>(二)媒介存取控制(Media Access Control, 簡稱MAC)：定義傳輸媒體存取的方式，如CSMA/CD、Token Ring等</li>
<li>例子 ：Physical Address、<span>OSI規定網路上各乙太網路、記號環網路、橋接器等都是在此層運作的。</span></li>
</ul>
<h3>網路層 (Network Layer)</h3>
<ul>
<li>邏輯定址</li>
<li>資料封包 (packet) 的傳輸路徑(Routing)選擇</li>
<li>功能：1.決定移動資料的最佳方式(RIP、EIGRP、OSPF) 2.資料遶送 3.錯誤控制(少用)</li>
<li>例子：IP、IPX、路由器</li>
</ul>
<p><br/>傳輸層 (Transport Layer)<br/><br/></p>
<ul>
<li>提供可靠或不可靠的遞送</li>
<li>重傳之前先校正錯誤</li>
<li>功能 ：封包順序、資料流量控制、偵測重複的封包、緊急資料的傳送、複雜的錯誤與回復處理、以及安全方面的課題。</li>
<li>例子 ：TCP 、 UDP</li>
</ul>
<p><br/><br/><br/> <br/>交談層 (Session Layer)<span>  </span><span> </span></p>
<ul>
<li>負責建立、管理、以及終止兩個通訊主機的對話</li>
<li>功能 ：使不同應用程式的資料與其他應用程式的資料分開</li>
<li>例子 ：SQL 、 RPC<span> <br/><br/><br/></span></li>
</ul>
<h3>表現層 (Presentation Layer</h3>
<ul>
<li>處理不同資料格式之間的字碼轉換及編碼及解碼</li>
<li>功能：字元碼轉換  資料形態轉換  對資料進行壓縮和加密﹐以提高速度和增加安全性</li>
<li>例子：ASCII 碼和 EDCDIC 碼之間的轉換<br/><br/></li>
</ul>
<h3>應用層 (Application Layer)</h3>
<ul>
<li>提供使用者介面</li>
<li>功能：檔案、印表、訊息、資料庫、應用服務</li>
<li>例子：HTTP 、 Telnet 、 SMTP 、 POP3 、 FTP 、 SNMP</li>
</ul>
<h2>電腦軟硬體簡介</h2>
<h3>機殼：容納和保護主機營體的主機殼</h3>
<h3>電源(Power)：是提供內接式元件電力來源的組件，他將市電轉換為直流電供給其他元件使用</h3>
<h3>顯示卡(VGA )：顯示卡在電腦中主要作用就是程式運行時根據CPU提共的指令和有關數據</h3>
<h3>網路卡：網路卡是電腦與纜線的介面，有依各專門處裡網路介面的處裡器，會依照記憶體內程式動作。</h3>
<h3>硬碟：硬碟就是電腦中負責儲存資料的工具，它就像是一各資料庫依樣，電腦中的大小資料均可以在此找到</h3>
<h3>軟碟機：軟碟機又叫磁碟機，是一種儲存資料的工具，當拰要儲存檔案大小在1.44MB以下的資料時，磁碟片畢竟是一項蠻方便操作且攜帶的設備，所以軟碟機也可稱為磁片機。</h3>
<h1>w10</h1>
<h5><span>ssh===secure share<br/>putty 權限軟體<br/>prtvate key<br/>public key<br/>ssh-keygen -t rsa -b 4096 -C "50833109"<br/>pwd=== print working directory<br/><br/><br/></span></h5>
<p><a href="https://drive.google.com/file/d/1mqtHKdD2EDJjUvfs76T1-Cs0OwXVJtvO/view?usp=sharing"></a></p>
<h1>w12-13</h1>
<h4>基本概念:</h4>
<h4>1. 這裡所指的 Blogger API 為:<span> </span><a href="https://developers.google.com/blogger/docs/3.0/using">https://developers.google.com/blogger/docs/3.0/using</a></h4>
<h4>2. 將 CMSiMDE 中的 Pelican Blog 內容同步到 Google Blogger 的目的, 在讓網際內容管理系統中的網誌原始資料修改過程具備版次, 而且可同時將網誌出版在 Github Pages 與 Google Blogger 中, 讓網際內容的保存較具有永續性.</h4>
<h4>3. Google Blogger 中的網誌系統各有獨立 ID, 這裡稱為 blog_id, 而網誌中的每一篇文章各有獨立 ID, 這裡稱為 post_id.</h4>
<h4>4. Google Blogger 管理者登入後, 在 Settings - Permissions 項下, 允許 invite more authors, 而且在 Settings - Permissions - Blog admins and Authors 項下, 允許將所邀請共同寫作的 Author 提升為 Admin 管理者.</h4>
<h4>5. Google 的每一個 API 都允許使用者建立以 Oauth2 為基礎的登入使用授權憑證, 配合所啟動的各種 API 程式庫, 一旦啟用並登入後, 可以透過程式方法, 呼叫程式庫功能, 對各種 Google 所提供的服務 (Blogger, Drive, Gmail, Calendar 等) 新增內容. 以 Blogger 而言, 只要使用者被設為某一網誌的共同作者, 即擁有在該網誌新增或編輯自己所發布的網誌文章權限.</h4>
<h4>6. 使用者登入 Google 帳號後, 在<span> </span><a href="https://console.developers.google.com/">https://console.developers.google.com</a><span> </span>中所建立的 Oauth2 client ID, 可以下載存為 client_secrets.json 檔案.</h4>
<h4>7. client_secrets.json 檔案則可以透過下列程式, 轉換為 credential_token.dat, 使用者針對特定啟用的 API 程式庫, 可以在讀取 credential_token.dat 的情況下, 取得與登入 Gmail 帳號相同的使用授權, 直接在擁有權限的 blog_id 中新增特定的文章 (並以特定的 post_id 辨識).</h4>
<div class="line number1 index0 alt2"><code class="py decorator"></code></div>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py decorator">@language</code> <code class="py plain">python</code></div>
<div class="line number2 index1 alt1"><code class="py comments"># https://developers.google.com/blogger/docs/3.0/using</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># under Mac command + b to execute</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">pickle</code></div>
<div class="line number5 index4 alt2"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number6 index5 alt1"><code class="py keyword">from</code> <code class="py plain">googleapiclient.discovery </code><code class="py keyword">import</code> <code class="py plain">build</code></div>
<div class="line number7 index6 alt2"><code class="py keyword">from</code> <code class="py plain">google_auth_oauthlib.flow </code><code class="py keyword">import</code> <code class="py plain">InstalledAppFlow</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="py plain">SCOPES </code><code class="py keyword">=</code> <code class="py plain">[</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">, ]</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="py comments"># we check if the file tBo store the credentials exists</code></div>
<div class="line number13 index12 alt2"><code class="py keyword">if</code> <code class="py keyword">not</code> <code class="py plain">os.path.exists(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">):</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="py spaces">    </code><code class="py plain">flow </code><code class="py keyword">=</code> <code class="py plain">InstalledAppFlow.from_client_secrets_file(</code><code class="py string">'./../../yen_gm_blogger_secrets.json'</code><code class="py plain">, SCOPES)</code></div>
<div class="line number16 index15 alt1"><code class="py spaces">    </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">flow.run_local_server()</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">, </code><code class="py string">'wb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">        </code><code class="py plain">pickle.dump(credentials, credentials_dat)</code></div>
<div class="line number20 index19 alt1"><code class="py keyword">else</code><code class="py plain">:</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(</code><code class="py string">'./../../yen_gm_blogger_token.dat'</code><code class="py plain">, </code><code class="py string">'rb'</code><code class="py plain">) as credentials_dat:</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">        </code><code class="py plain">credentials </code><code class="py keyword">=</code> <code class="py plain">pickle.load(credentials_dat)</code></div>
<div class="line number23 index22 alt2"><code class="py plain">service </code><code class="py keyword">=</code> <code class="py plain">build(</code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, credentials</code><code class="py keyword">=</code><code class="py plain">credentials)</code></div>
<div class="line number24 index23 alt1"><code class="py plain">g.es(service)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
<h1>以 SSH 維護倉儲</h1>
<p>由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.</p>
<p>設定步驟如下:</p>
<p>1. 下載 Putty 工具組</p>
<p><span>從 </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" rel="nofollow">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a><span><span> </span>下載一般版, 或從<span> </span></span><a href="http://jakub.kotrla.net/putty/" rel="nofollow">http://jakub.kotrla.net/putty/</a><span><span> </span>下載特殊的可攜版本.</span></p>
<p><span>2. 利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後, 以 </span></p>
<div>
<div class="syntaxhighlighter js" id="highlighter_637066">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">ssh-keygen -t rsa -b 4096 -C </code><code class="js string">"使用者學號"</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key</p>
<p>之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&gt; SSH and GPG keys 頁面下.</p>
<p>3. 接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_36704">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">修改啟動的 start.bat 加入下列設定:</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="js plain">set GIT_HOME=%Disk%:\portablegit\bin\</code></div>
<div class="line number4 index3 alt1"><code class="js plain">set GIT_SSH=%Disk%:\putty\plink.exe</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>4. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.</p>
<p>開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&gt;SSH-&gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. </p>
<p>並在 Connection-&gt;Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128.</p>
<p>5. 之後確定 home 下的 .ssh 目錄中的 config 設定檔案為:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_491767">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js preprocessor"># no proxy at home</code></div>
<div class="line number2 index1 alt1"><code class="js preprocessor">#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p</code></div>
<div class="line number3 index2 alt2"><code class="js preprocessor"># set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup</code></div>
<div class="line number4 index3 alt1"><code class="js plain">ProxyCommand y:/putty/plink.exe github.com %h %p</code></div>
<div class="line number5 index4 alt2"><code class="js spaces"> </code> </div>
<div class="line number6 index5 alt1"><code class="js plain">Host github.com</code></div>
<div class="line number7 index6 alt2"><code class="js spaces">    </code><code class="js plain">User git</code></div>
<div class="line number8 index7 alt1"><code class="js spaces">    </code><code class="js plain">Port 22</code></div>
<div class="line number9 index8 alt2"><code class="js spaces">    </code><code class="js plain">Hostname github.com</code></div>
<div class="line number10 index9 alt1"><code class="js spaces">    </code> </div>
<div class="line number11 index10 alt2"><code class="js spaces">    </code><code class="js preprocessor"># for connect.exe need openssh key format</code></div>
<div class="line number12 index11 alt1"><code class="js spaces">    </code><code class="js preprocessor">#IdentityFile "y:\home\.ssh\id_rsa_mdecourse"</code></div>
<div class="line number13 index12 alt2"><code class="js spaces">    </code><code class="js preprocessor"># for plink.exe need rsa key format but set under putty github.com session</code></div>
<div class="line number14 index13 alt1"><code class="js spaces">    </code><code class="js preprocessor"># plink.exe do not need the following setting</code></div>
<div class="line number15 index14 alt2"><code class="js spaces">    </code><code class="js preprocessor">#IdentityFile "y:\home\.ssh\mdecourse_putty_private.ppk"</code></div>
<div class="line number16 index15 alt1"><code class="js spaces"> </code> </div>
<div class="line number17 index16 alt2"><code class="js spaces">    </code><code class="js plain">TCPKeepAlive yes</code></div>
<div class="line number18 index17 alt1"><code class="js spaces">    </code><code class="js plain">IdentitiesOnly yes</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>6. 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_783770">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[core]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">repositoryformatversion = 0</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">filemode = </code><code class="js keyword">false</code></div>
<div class="line number4 index3 alt1"><code class="js spaces">    </code><code class="js plain">bare = </code><code class="js keyword">false</code></div>
<div class="line number5 index4 alt2"><code class="js spaces">    </code><code class="js plain">logallrefupdates = </code><code class="js keyword">true</code></div>
<div class="line number6 index5 alt1"><code class="js spaces">    </code><code class="js plain">symlinks = </code><code class="js keyword">false</code></div>
<div class="line number7 index6 alt2"><code class="js spaces">    </code><code class="js plain">ignorecase = </code><code class="js keyword">true</code></div>
<div class="line number8 index7 alt1"><code class="js plain">[submodule]</code></div>
<div class="line number9 index8 alt2"><code class="js spaces">    </code><code class="js plain">active = .</code></div>
<div class="line number10 index9 alt1"><code class="js plain">[remote </code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number11 index10 alt2"><code class="js spaces">    </code><code class="js preprocessor">#url = https://github.com/mdecourse/wcmj2020.git</code></div>
<div class="line number12 index11 alt1"><code class="js spaces">    </code><code class="js plain">url = git@github.com:mdecourse/wcmj2020.git</code></div>
<div class="line number13 index12 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/*:refs/remotes/origin/*</code></div>
<div class="line number14 index13 alt1"><code class="js plain">[branch </code><code class="js string">"master"</code><code class="js plain">]</code></div>
<div class="line number15 index14 alt2"><code class="js spaces">    </code><code class="js plain">remote = origin</code></div>
<div class="line number16 index15 alt1"><code class="js spaces">    </code><code class="js plain">merge = refs/heads/master</code></div>
<div class="line number17 index16 alt2"><code class="js plain">[submodule </code><code class="js string">"cmsimde"</code><code class="js plain">]</code></div>
<div class="line number18 index17 alt1"><code class="js spaces">    </code><code class="js plain">url = https:</code><code class="js comments">//github.com/mdecourse/cmsimde.git</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push.</p>
<p><a href="https://drive.google.com/file/d/1VNBHNMXS1-wG7oaKDCpG5p3khsffB7oa/view?usp=sharing">W10 以 ssh 對倉儲連線設定說明影片</a> (登入 @gm 帳號後觀看)</p>
<p><span></span></p>